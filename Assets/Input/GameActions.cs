//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""20c36b21-5a81-4414-ad84-5dba79801ad2"",
            ""actions"": [
                {
                    ""name"": ""interact"",
                    ""type"": ""Button"",
                    ""id"": ""83d8b30d-509a-4e60-8c64-c6ff661f4949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""078f3a04-18e9-46f0-b672-e42840f99059"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""primaryFire"",
                    ""type"": ""Button"",
                    ""id"": ""7c7213b3-e916-412b-b1ea-39e0b81dc296"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39843f1c-d214-4b43-90bd-e3b15afc4008"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbb912d7-8ab1-4048-b616-25bbdb0eae74"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""049d1f78-341d-4bf8-a744-bc8d6235615e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""649ee7c6-6243-42df-86b1-21f73535bdcb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1ba7eb17-4564-47b2-91a4-3fdc080f5f28"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4495dc22-fe97-42dc-b21d-a2ee34f3338f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""18a2d0e2-6208-41d1-b7a9-34033f0e97ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""180ccffb-fe99-4dbc-b445-2c2c40e4276c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ea7f50b-af4c-4494-baff-12557f395141"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea4d3de1-7fd4-4821-b1aa-a19cd2edfcee"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3f1f690-fada-4e23-834d-7e25d64004fa"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""primaryFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""pause"",
            ""id"": ""3a2fed77-c918-417b-a6ad-d8498bf304bd"",
            ""actions"": [
                {
                    ""name"": ""openPauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""be76a447-8a76-425a-a1dd-bf79e076fb33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""491b46f2-fbd2-40c3-bff4-93b0a5cecd05"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""openPauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""cutscene"",
            ""id"": ""1b0ac630-d81b-46de-8120-75adc7740d29"",
            ""actions"": [
                {
                    ""name"": ""displayNextLine"",
                    ""type"": ""Button"",
                    ""id"": ""ff9065d2-0e1a-438f-9e35-7dc2a4647c48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""skip"",
                    ""type"": ""Button"",
                    ""id"": ""9708e714-126e-40b5-8f5c-04561a045c18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc3b7a4b-4de7-41b9-ac07-619202242ce7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""displayNextLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""076eb4cf-7ba6-430b-93d1-c37aa944d9d2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""displayNextLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96e8d950-7657-46da-a72e-2f30c0499a8c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b8b364b-53ec-4c22-b7d0-df7509aadd49"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_interact = m_gameplay.FindAction("interact", throwIfNotFound: true);
        m_gameplay_movement = m_gameplay.FindAction("movement", throwIfNotFound: true);
        m_gameplay_primaryFire = m_gameplay.FindAction("primaryFire", throwIfNotFound: true);
        // pause
        m_pause = asset.FindActionMap("pause", throwIfNotFound: true);
        m_pause_openPauseMenu = m_pause.FindAction("openPauseMenu", throwIfNotFound: true);
        // cutscene
        m_cutscene = asset.FindActionMap("cutscene", throwIfNotFound: true);
        m_cutscene_displayNextLine = m_cutscene.FindAction("displayNextLine", throwIfNotFound: true);
        m_cutscene_skip = m_cutscene.FindAction("skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_interact;
    private readonly InputAction m_gameplay_movement;
    private readonly InputAction m_gameplay_primaryFire;
    public struct GameplayActions
    {
        private @GameActions m_Wrapper;
        public GameplayActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @interact => m_Wrapper.m_gameplay_interact;
        public InputAction @movement => m_Wrapper.m_gameplay_movement;
        public InputAction @primaryFire => m_Wrapper.m_gameplay_primaryFire;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @interact.started += instance.OnInteract;
            @interact.performed += instance.OnInteract;
            @interact.canceled += instance.OnInteract;
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @primaryFire.started += instance.OnPrimaryFire;
            @primaryFire.performed += instance.OnPrimaryFire;
            @primaryFire.canceled += instance.OnPrimaryFire;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @interact.started -= instance.OnInteract;
            @interact.performed -= instance.OnInteract;
            @interact.canceled -= instance.OnInteract;
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @primaryFire.started -= instance.OnPrimaryFire;
            @primaryFire.performed -= instance.OnPrimaryFire;
            @primaryFire.canceled -= instance.OnPrimaryFire;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);

    // pause
    private readonly InputActionMap m_pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_pause_openPauseMenu;
    public struct PauseActions
    {
        private @GameActions m_Wrapper;
        public PauseActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @openPauseMenu => m_Wrapper.m_pause_openPauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @openPauseMenu.started += instance.OnOpenPauseMenu;
            @openPauseMenu.performed += instance.OnOpenPauseMenu;
            @openPauseMenu.canceled += instance.OnOpenPauseMenu;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @openPauseMenu.started -= instance.OnOpenPauseMenu;
            @openPauseMenu.performed -= instance.OnOpenPauseMenu;
            @openPauseMenu.canceled -= instance.OnOpenPauseMenu;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @pause => new PauseActions(this);

    // cutscene
    private readonly InputActionMap m_cutscene;
    private List<ICutsceneActions> m_CutsceneActionsCallbackInterfaces = new List<ICutsceneActions>();
    private readonly InputAction m_cutscene_displayNextLine;
    private readonly InputAction m_cutscene_skip;
    public struct CutsceneActions
    {
        private @GameActions m_Wrapper;
        public CutsceneActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @displayNextLine => m_Wrapper.m_cutscene_displayNextLine;
        public InputAction @skip => m_Wrapper.m_cutscene_skip;
        public InputActionMap Get() { return m_Wrapper.m_cutscene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutsceneActions set) { return set.Get(); }
        public void AddCallbacks(ICutsceneActions instance)
        {
            if (instance == null || m_Wrapper.m_CutsceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Add(instance);
            @displayNextLine.started += instance.OnDisplayNextLine;
            @displayNextLine.performed += instance.OnDisplayNextLine;
            @displayNextLine.canceled += instance.OnDisplayNextLine;
            @skip.started += instance.OnSkip;
            @skip.performed += instance.OnSkip;
            @skip.canceled += instance.OnSkip;
        }

        private void UnregisterCallbacks(ICutsceneActions instance)
        {
            @displayNextLine.started -= instance.OnDisplayNextLine;
            @displayNextLine.performed -= instance.OnDisplayNextLine;
            @displayNextLine.canceled -= instance.OnDisplayNextLine;
            @skip.started -= instance.OnSkip;
            @skip.performed -= instance.OnSkip;
            @skip.canceled -= instance.OnSkip;
        }

        public void RemoveCallbacks(ICutsceneActions instance)
        {
            if (m_Wrapper.m_CutsceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICutsceneActions instance)
        {
            foreach (var item in m_Wrapper.m_CutsceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CutsceneActions @cutscene => new CutsceneActions(this);
    public interface IGameplayActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnPrimaryFire(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnOpenPauseMenu(InputAction.CallbackContext context);
    }
    public interface ICutsceneActions
    {
        void OnDisplayNextLine(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
    }
}
